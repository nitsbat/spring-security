Spring security means application level security. i.e the api or the app which we have exposed.
The authenticated people only have the authority to use or call your API.

Application security framework examples are:

1) Login/Logout Security
2) Allow/Block users to access URL's to only logged in users.
3)  Allow/Block users to access URL's to only logged in users with special roles.

Also when we add spring security , it resolves all the very common vulnerabilities.

Spring Security can do 
1) Username/password authentication.
2) LDAP 
3) app level authorization
4) Intra app authorization like OAuth
5) Microservice security (tokens , JWT) 
6) Method level security


Authentication and Authorization

Authentication - it means who you are. it confirms that users are who they claim to be. e.g username and password . this is known as
				 knowledge based authentication. other example is phone/text messages which is known as possession based authentication.
				 

Authorization - Are the users allowed to do this. It gives the authenticated users the permission to access a resource.
				It is done by granting authority to the user which the application needs to do before authorising which means when the
				user is logged in or authenticated it should be given what operations the user can be done like the group of authorities
				for every user logged in.

Principal - It is currently logged in user. As the user login into the system the application establish a principal behavior to that user.
		    cozz of this we dont have to always privide the username or password for everything use in the application.
			
Granted Authority - way of providing authorisation.

Roles - Group of authority.


****************************************** ADDING Spring SEcurity ********************

Spring security can be added by adding dependency of spring-boot-starter-security
You dont have to add any type of configuration in case of spring security.
and as soon as you access the api or that localhost, it will definitely show the login page.

How does this happen..??

It is because of filters. These are servelet filters.
Now what are servelet filters. In simple application suppose we have a web app and iside it many servelets are there
which can perform their particular tasks.as a result when a user enter a url or request anything the particular
servelet takes the request and gives response like this work will be done by me. Between the application and servelets
resides filters.
Filters are the objects which lies between the servelet and web application for preprocessing the request. like
it has the authority to do filtering tasks with the url like encryption, taking header from request ,etc.

So Spring actually creating the spring security filter before the request reaches the application. It has authority
to allow or deny access.

Spring security does following default behavior :

1) Adds mandatory authentication for URLs except the error page.
2) Adds login form.
3) Handles login errors
4) Creates a user and sets a default password.

Default username will be "user" and password will be in console.

you can provide your specified username and password in spring.properties file.

******************** How to configure Authentication in Spring security *******************************

Authentication Manager - Its a manager controlling the authentication in spring security. It has an authenticate()
                         method which will return true for successfull authentication or will throw an exception for
                         the unsuccessfull authentication.

We work with the builder class of AuthenticationManager class and then we will set the configuration.

Now how do i get authentication manager builder.?
spring have a class called WebSecurityConfigurerAdapter which we need to extend and
 it has the method configure() which takes AuthenticationManagerBuilder
and using that parameter we can give our security configurations. As a result we have to create a new class extending it
anfd with annotation @EnableWebSecurity.

In memory authentication means the username and password are stored in the memory. for storing in file , databse , we
have other configurations.

IMP - Always deal with hashed passwords.

Spring always force the developers to use the password encoders in place of the plain text passwords.

********************************* Configuring Spring Security Authorization ******************

Now suppose there are multiple API's for example home page, user login page and admin page.
home page can be accessed by all, users api or page can be accessed by user and admin but the admin page will only by admin.
So for configuring authorisation to these api's we have a class called HttpSecurity in spring security dependency.
And to get whole of the object of this class we take it from the same WebSecurityConfigurerAdapter class in configure method.

HttpSecurity object takes the path and also the role for the authorisation.